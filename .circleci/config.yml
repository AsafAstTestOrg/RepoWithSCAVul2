version: 2.1

jobs:

  build:
    docker:
      - image: circleci/openjdk:8-jdk
    working_directory: ~/repo
    environment:
      MAVEN_OPTS: -Xmx3200m
    steps:
      - checkout
      - restore_cache:
          key: maven-repo-v1-{{ .Branch }}-{{ checksum "pom.xml" }}
      - run: mvn clean install -DskipTests
      - save_cache:
          paths:
            - ~/.m2
          key: maven-repo-v1-{{ .Branch }}-{{ checksum "pom.xml" }}
      - persist_to_workspace:
          root: .
          paths:
            - .

  test:
    docker:
      - image: circleci/openjdk:8-jdk
    working_directory: ~/repo
    environment:
      MAVEN_OPTS: -Xmx3200m
    steps:
      - attach_workspace:
          at: .
      - restore_cache:
          key: maven-repo-v1-{{ .Branch }}-{{ checksum "pom.xml" }}
      - run: mvn test
      - run:
          name: Save test results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} ~/test-results/junit/ \;
          when: always
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: ~/test-results/junit
      - store_artifacts:
          path: ~/repo/target/cucumber/index.html
      - store_artifacts:
          path: ~/repo/target/site/jacoco/
      - save_cache:
          paths:
            - ~/.m2
          key: maven-repo-v1-{{ .Branch }}-{{ checksum "pom.xml" }}
          
  sonar:
    docker:
      - image: circleci/openjdk:8-jdk
    working_directory: ~/repo
    environment:
      MAVEN_OPTS: -Xmx3200m
    steps:
      - attach_workspace:
          at: .
      - restore_cache:
          key: maven-repo-v1-{{ .Branch }}-{{ checksum "pom.xml" }}
      - run:
          name: Run Code Quality Tests
          command: mvn sonar:sonar -X -Dsonar.login=${SONAR_LOGIN} -Dsonar.projectKey=${CIRCLE_PROJECT_USERNAME}_${CIRCLE_PROJECT_REPONAME}
      - save_cache:
          paths:
            - ~/.m2
          key: maven-repo-v1-{{ .Branch }}-{{ checksum "pom.xml" }}
      - run:
          name: Check Quality Gate
          command: |
            REPORT_PATH="/home/circleci/repo/target/sonar/report-task.txt"
            CE_TASK_ID_KEY="ceTaskId="
            SONAR_INSTANCE="https://sonarcloud.io"
            SLEEP_TIME=5
            # get the compute engine task id
            ce_task_id=$(cat $REPORT_PATH | grep $CE_TASK_ID_KEY | cut -d'=' -f2)
            echo "Using task id of ${ce_task_id}"
            if [ -z "$ce_task_id" ]; then
               echo "No task id found"
               exit 1
            fi
            # grab the status of the task
            # if CANCELLED or FAILED, fail the Build
            # if SUCCESS, stop waiting and grab the analysisId
            wait_for_success=true
            while [ "${wait_for_success}" = "true" ]
            do
              ce_status=$(curl -s -u "${SONAR_LOGIN}": "${SONAR_INSTANCE}"/api/ce/task?id=${ce_task_id} | jq -r .task.status)
              echo "Status of SonarQube task is ${ce_status}"
              if [ "${ce_status}" = "CANCELLED" ]; then
                echo "SonarQube Compute job has been cancelled - exiting with error"
                exit 504
              fi
              if [ "${ce_status}" = "FAILED" ]; then
                echo "SonarQube Compute job has failed - exit with error"
                exit 500
              fi
              if [ "${ce_status}" = "SUCCESS" ]; then
                wait_for_success=false
              fi
              sleep "${SLEEP_TIME}"
            done
            ce_analysis_id=$(curl -s -u "${SONAR_LOGIN}": "${SONAR_INSTANCE}"/api/ce/task?id=$ce_task_id | jq -r .task.analysisId)
            echo "Using analysis id of ${ce_analysis_id}"
            # get the status of the quality gate for this analysisId
            qg_status=$(curl -s -u "${SONAR_LOGIN}": "${SONAR_INSTANCE}"/api/qualitygates/project_status?analysisId="${ce_analysis_id}" | jq -r .projectStatus.status)
            echo "Quality Gate status is ${qg_status}"
            if [ "${qg_status}" != "OK" ]; then
              echo "Quality gate is not OK - exiting with error"
              exit 1
            fi
  
  build-image:
    docker:
      - image: docker:19.03.13
    working_directory: ~/repo
    steps:
      - attach_workspace:
          at: .
      - setup_remote_docker:
          version: 19.03.13
          #docker_layer_caching: true
      - run:
          name: Build Repos-Manager Docker Image
          command: docker build -t repos-manager .
      - run:
          name: Save Repos-Manager Docker Image to File
          command: docker save -o repos-manager-image.tar repos-manager
      - persist_to_workspace:
          root: .
          paths:
            - ./repos-manager-image.tar
      
  deploy:
    docker:
      - image: docker:19.03.13
    working_directory: ~/repo
    steps:
      - setup_remote_docker:
          version: 19.03.13
          #docker_layer_caching: true
      - attach_workspace:
          at: .
      - run:
          name: Load Repos-Manager Docker Image from File
          command: docker load -i repos-manager-image.tar
      - run:
          name: Deploy Repos-Manager Docker Container
          command: docker run -d --name repos-manager -e GITHUB_CLIENT_ID=$GITHUB_CLIENT_ID -e GITHUB_CLIENT_SECRET=$GITHUB_CLIENT_SECRET -e DATA_STORE=$DATA_STORE repos-manager:latest
      - run:
          name: Wait for Repos-Manager Application to be Up and Running
          # in curl command -4 flag stands for forcing curl to use IPv4 (--retry-connrefused won't work otherwise)
          command: docker exec repos-manager curl -4 --retry 15 --retry-delay 2 --retry-connrefused http://localhost:8080/actuator/health
      - run:
          name: print Repos-Manager Docker Container logs
          command: |
            docker ps -a
            docker logs repos-manager
          when: always
  
  system-tests:
    parameters:
      os:
        type: string
      node-version:
        type: string
    docker:
      - image: circleci/openjdk:8-jdk
    steps:
      - run: echo << parameters.os >> - << parameters.node-version >>

  publish-to-DockerHub:
    docker:
      - image: docker:19.03.13
    working_directory: ~/repo
    steps:
      - setup_remote_docker:
          version: 19.03.13
          #docker_layer_caching: true
      - attach_workspace:
          at: .
      - run:
          name: Load Repos-Manager Docker Image from File
          command: docker load -i repos-manager-image.tar
      - run:
          name: Publish Docker images to Docker Hub
          command: |
            docker login -u ${DOCKER_USER} -p ${DOCKER_PASSWORD} docker.io
            docker push ${DOCKER_REPO}

workflows:
  ci-cd:
    jobs:
      - build
      - test:
          requires:
            - build
      - sonar:
          requires:
            - build
      - build-image:
          requires:
            - test
            - sonar
      - deploy:
          requires:
            - build-image
      - system-tests:
          matrix:
            parameters:
              os: [linux, macos]
              node-version: ["10.9.0", "11.9.0",]
          requires:
            - deploy
      - publish-to-DockerHub:
          filters:
            branches:
              only:
                - master
                - publish-docker-image
          requires:
            - system-tests